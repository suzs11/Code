clear; clc;

rootFolder = fullfile( 'maldata9_rc_optDimTau_128_128');

categories = {'1','2','3','4','5','6','7','8','9'};

imds = imageDatastore(fullfile(rootFolder, categories), 'LabelSource','foldernames');
one = find(imds.Labels=='1',3);
two = find(imds.Labels=='2',3);
three= find(imds.Labels=='3',3);
four = find(imds.Labels=='4',3);
five = find(imds.Labels=='5',3);
six = find(imds.Labels=='6',3);
seven = find(imds.Labels=='7',3);
eight = find(imds.Labels=='8',3);
nine = find(imds.Labels=='9',3);


% figure;
% n=3;
% for i=1:n
% subplot(n,9,1+9*(i-1)),imshow(readimage(imds, one(i)));
% title('\fontsize{12}Ramnit')
% subplot(n,9,2+9*(i-1)),imshow(readimage(imds, two(i)));
% title('\fontsize{12}Lollipop')
% subplot(n,9,3+9*(i-1)),imshow(readimage(imds, three(i)));
% title('\fontsize{12}Kelihos3')
% subplot(n,9,4+9*(i-1)),imshow(readimage(imds, four(i)));
% title('\fontsize{12}Vundo')
% subplot(n,9,5+9*(i-1)),imshow(readimage(imds, five(i)));
% title('\fontsize{12}Simda')
% subplot(n,9,6+9*(i-1)),imshow(readimage(imds, six(i)));
% title('\fontsize{12}Tracur')
% subplot(n,9,7+9*(i-1)),imshow(readimage(imds, seven(i)));
% title('\fontsize{12}Kelihos1')
% subplot(n,9,8+9*(i-1)),imshow(readimage(imds, eight(i)));
% title('\fontsize{12}Obfuscator')
% subplot(n,9,9+9*(i-1)),imshow(readimage(imds, nine(1)));
% title('\fontsize{12}Gatak')
% end


fig = figure;
numImages = 2916;
perm = randperm(numImages,20);
for i = 1:20
    subplot(4,5,i);
    imshow(imds.Files{perm(i)});
    drawnow;
end
saveas(fig,'images/cnnSample.eps','epsc')

[trainingSet, testSet] = splitEachLabel(imds, 0.7, 'randomize');
%% The networks architecture
layers = [ ...
    imageInputLayer([224 224 3])
    convolution2dLayer(5,20)
    reluLayer
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(5,16)
    reluLayer
    maxPooling2dLayer(2,'stride',2)
    
    fullyConnectedLayer(2)
    softmaxLayer
    classificationLayer];
%% The architecture of the CNN

analyzeNetwork(layers)


options = trainingOptions('sgdm', ... %优化器                        
                          'ExecutionEnvironment','cpu', ...
                          'LearnRateSchedule','piecewise', ... %学习率
                          'LearnRateDropFactor',0.2, ...                        
                          'InitialLearnRate',0.09, ...
                          'Momentum', 0.9, ... % changing momentum
                          'GradientThreshold',1, ...
                          'shuffle','every-epoch', ...
                          'Verbose',false, ...
                          'LearnRateDropPeriod',5, ...
                          'MaxEpochs',60, ... %最大学习整个数据集的次数
                          'MiniBatchSize',256, ... %每次学习样本数
                          'ValidationData',{testSet,testSet.Labels}, ...
                          'Plots','training-progress'); %画出整个训练过程


%% The Data Set and training 
[net,traininfo] = trainNetwork(trainingSet,layers,options);
save 'CSNet.mat' net

YPred = classify(net,testSet);
YTest = testSet.Labels;
accuracy = sum(YPred == YTest)/numel(YTest);
formatSpace = 'The accuracy of test set classification is %7.5\n';
fprintf(formatSpace,accuracy)

figl=figure;
plot(traininfo.TrainingLoss,'MarkerFaceColor','r')
xlabel("Iteration")
ylabel("Loss")
saveas(figl,'images/cnnLoss.eps','epsc')
figa = figure;
plot(traininfo.TrainingAccuracy,'MarkerFaceColor','b')
xlabel("Iteration")
ylabel("Accuracy(%)")
saveas(figa,'images/cnnAccuracy.eps','epsc')


%plot(net.Layers)
%title('Architecture of Networks')
%set(gca, 'YLim', [150,170]);

figc = figure('Units','normalized','Position',[0.2 0.2 0.4 0.4]);
cm = confusionchart(YTest,YPred);
cm.Title = 'Confusion Matrix for Test Data';
cm.ColumnSummary = 'column-normalized';
cm.RowSummary = 'row-normalized';
saveas(figc,'images/cnnConfusion.eps','epsc')

